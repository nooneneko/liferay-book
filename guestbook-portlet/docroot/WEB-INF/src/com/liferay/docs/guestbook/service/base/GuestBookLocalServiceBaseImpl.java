/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.docs.guestbook.service.base;

import com.liferay.docs.guestbook.model.GuestBook;
import com.liferay.docs.guestbook.service.GuestBookLocalService;
import com.liferay.docs.guestbook.service.persistence.EntryPersistence;
import com.liferay.docs.guestbook.service.persistence.GuestBookPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the guest book local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.liferay.docs.guestbook.service.impl.GuestBookLocalServiceImpl}.
 * </p>
 *
 * @author User
 * @see com.liferay.docs.guestbook.service.impl.GuestBookLocalServiceImpl
 * @see com.liferay.docs.guestbook.service.GuestBookLocalServiceUtil
 * @generated
 */
public abstract class GuestBookLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements GuestBookLocalService, IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.liferay.docs.guestbook.service.GuestBookLocalServiceUtil} to access the guest book local service.
	 */

	/**
	 * Adds the guest book to the database. Also notifies the appropriate model listeners.
	 *
	 * @param guestBook the guest book
	 * @return the guest book that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public GuestBook addGuestBook(GuestBook guestBook)
		throws SystemException {
		guestBook.setNew(true);

		return guestBookPersistence.update(guestBook);
	}

	/**
	 * Creates a new guest book with the primary key. Does not add the guest book to the database.
	 *
	 * @param guestBookId the primary key for the new guest book
	 * @return the new guest book
	 */
	@Override
	public GuestBook createGuestBook(long guestBookId) {
		return guestBookPersistence.create(guestBookId);
	}

	/**
	 * Deletes the guest book with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param guestBookId the primary key of the guest book
	 * @return the guest book that was removed
	 * @throws PortalException if a guest book with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public GuestBook deleteGuestBook(long guestBookId)
		throws PortalException, SystemException {
		return guestBookPersistence.remove(guestBookId);
	}

	/**
	 * Deletes the guest book from the database. Also notifies the appropriate model listeners.
	 *
	 * @param guestBook the guest book
	 * @return the guest book that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public GuestBook deleteGuestBook(GuestBook guestBook)
		throws SystemException {
		return guestBookPersistence.remove(guestBook);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(GuestBook.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return guestBookPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.docs.guestbook.model.impl.GuestBookModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return guestBookPersistence.findWithDynamicQuery(dynamicQuery, start,
			end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.docs.guestbook.model.impl.GuestBookModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return guestBookPersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return guestBookPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return guestBookPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public GuestBook fetchGuestBook(long guestBookId) throws SystemException {
		return guestBookPersistence.fetchByPrimaryKey(guestBookId);
	}

	/**
	 * Returns the guest book with the matching UUID and company.
	 *
	 * @param uuid the guest book's UUID
	 * @param  companyId the primary key of the company
	 * @return the matching guest book, or <code>null</code> if a matching guest book could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public GuestBook fetchGuestBookByUuidAndCompanyId(String uuid,
		long companyId) throws SystemException {
		return guestBookPersistence.fetchByUuid_C_First(uuid, companyId, null);
	}

	/**
	 * Returns the guest book matching the UUID and group.
	 *
	 * @param uuid the guest book's UUID
	 * @param groupId the primary key of the group
	 * @return the matching guest book, or <code>null</code> if a matching guest book could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public GuestBook fetchGuestBookByUuidAndGroupId(String uuid, long groupId)
		throws SystemException {
		return guestBookPersistence.fetchByUUID_G(uuid, groupId);
	}

	/**
	 * Returns the guest book with the primary key.
	 *
	 * @param guestBookId the primary key of the guest book
	 * @return the guest book
	 * @throws PortalException if a guest book with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public GuestBook getGuestBook(long guestBookId)
		throws PortalException, SystemException {
		return guestBookPersistence.findByPrimaryKey(guestBookId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return guestBookPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns the guest book with the matching UUID and company.
	 *
	 * @param uuid the guest book's UUID
	 * @param  companyId the primary key of the company
	 * @return the matching guest book
	 * @throws PortalException if a matching guest book could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public GuestBook getGuestBookByUuidAndCompanyId(String uuid, long companyId)
		throws PortalException, SystemException {
		return guestBookPersistence.findByUuid_C_First(uuid, companyId, null);
	}

	/**
	 * Returns the guest book matching the UUID and group.
	 *
	 * @param uuid the guest book's UUID
	 * @param groupId the primary key of the group
	 * @return the matching guest book
	 * @throws PortalException if a matching guest book could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public GuestBook getGuestBookByUuidAndGroupId(String uuid, long groupId)
		throws PortalException, SystemException {
		return guestBookPersistence.findByUUID_G(uuid, groupId);
	}

	/**
	 * Returns a range of all the guest books.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.docs.guestbook.model.impl.GuestBookModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of guest books
	 * @param end the upper bound of the range of guest books (not inclusive)
	 * @return the range of guest books
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<GuestBook> getGuestBooks(int start, int end)
		throws SystemException {
		return guestBookPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of guest books.
	 *
	 * @return the number of guest books
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getGuestBooksCount() throws SystemException {
		return guestBookPersistence.countAll();
	}

	/**
	 * Updates the guest book in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param guestBook the guest book
	 * @return the guest book that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public GuestBook updateGuestBook(GuestBook guestBook)
		throws SystemException {
		return guestBookPersistence.update(guestBook);
	}

	/**
	 * Returns the entry local service.
	 *
	 * @return the entry local service
	 */
	public com.liferay.docs.guestbook.service.EntryLocalService getEntryLocalService() {
		return entryLocalService;
	}

	/**
	 * Sets the entry local service.
	 *
	 * @param entryLocalService the entry local service
	 */
	public void setEntryLocalService(
		com.liferay.docs.guestbook.service.EntryLocalService entryLocalService) {
		this.entryLocalService = entryLocalService;
	}

	/**
	 * Returns the entry remote service.
	 *
	 * @return the entry remote service
	 */
	public com.liferay.docs.guestbook.service.EntryService getEntryService() {
		return entryService;
	}

	/**
	 * Sets the entry remote service.
	 *
	 * @param entryService the entry remote service
	 */
	public void setEntryService(
		com.liferay.docs.guestbook.service.EntryService entryService) {
		this.entryService = entryService;
	}

	/**
	 * Returns the entry persistence.
	 *
	 * @return the entry persistence
	 */
	public EntryPersistence getEntryPersistence() {
		return entryPersistence;
	}

	/**
	 * Sets the entry persistence.
	 *
	 * @param entryPersistence the entry persistence
	 */
	public void setEntryPersistence(EntryPersistence entryPersistence) {
		this.entryPersistence = entryPersistence;
	}

	/**
	 * Returns the guest book local service.
	 *
	 * @return the guest book local service
	 */
	public com.liferay.docs.guestbook.service.GuestBookLocalService getGuestBookLocalService() {
		return guestBookLocalService;
	}

	/**
	 * Sets the guest book local service.
	 *
	 * @param guestBookLocalService the guest book local service
	 */
	public void setGuestBookLocalService(
		com.liferay.docs.guestbook.service.GuestBookLocalService guestBookLocalService) {
		this.guestBookLocalService = guestBookLocalService;
	}

	/**
	 * Returns the guest book remote service.
	 *
	 * @return the guest book remote service
	 */
	public com.liferay.docs.guestbook.service.GuestBookService getGuestBookService() {
		return guestBookService;
	}

	/**
	 * Sets the guest book remote service.
	 *
	 * @param guestBookService the guest book remote service
	 */
	public void setGuestBookService(
		com.liferay.docs.guestbook.service.GuestBookService guestBookService) {
		this.guestBookService = guestBookService;
	}

	/**
	 * Returns the guest book persistence.
	 *
	 * @return the guest book persistence
	 */
	public GuestBookPersistence getGuestBookPersistence() {
		return guestBookPersistence;
	}

	/**
	 * Sets the guest book persistence.
	 *
	 * @param guestBookPersistence the guest book persistence
	 */
	public void setGuestBookPersistence(
		GuestBookPersistence guestBookPersistence) {
		this.guestBookPersistence = guestBookPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.liferay.docs.guestbook.model.GuestBook",
			guestBookLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.liferay.docs.guestbook.model.GuestBook");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return GuestBook.class;
	}

	protected String getModelClassName() {
		return GuestBook.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = guestBookPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.liferay.docs.guestbook.service.EntryLocalService.class)
	protected com.liferay.docs.guestbook.service.EntryLocalService entryLocalService;
	@BeanReference(type = com.liferay.docs.guestbook.service.EntryService.class)
	protected com.liferay.docs.guestbook.service.EntryService entryService;
	@BeanReference(type = EntryPersistence.class)
	protected EntryPersistence entryPersistence;
	@BeanReference(type = com.liferay.docs.guestbook.service.GuestBookLocalService.class)
	protected com.liferay.docs.guestbook.service.GuestBookLocalService guestBookLocalService;
	@BeanReference(type = com.liferay.docs.guestbook.service.GuestBookService.class)
	protected com.liferay.docs.guestbook.service.GuestBookService guestBookService;
	@BeanReference(type = GuestBookPersistence.class)
	protected GuestBookPersistence guestBookPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private GuestBookLocalServiceClpInvoker _clpInvoker = new GuestBookLocalServiceClpInvoker();
}